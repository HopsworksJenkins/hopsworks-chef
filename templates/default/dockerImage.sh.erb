#!/usr/bin/env bash

set -e

help() {
    echo ""
    echo "usage: $0 [create docker_file tag] | [list image]"
    echo ""
    exit 1
}

DOCKER_REGEX='^([a-z0-9]+(-[a-z0-9]+)*\.)*[a-z0-9]+(:[0-9]*)?(\/([a-zA-Z0-9\-]*))?\/([_a-zA-Z0-9]{0,62}[a-zA-Z0-9]$)'
if [ "$1" == "create" ] ; then

    # Sanity checks for injection attacks
    if [ ! -f "$2" ] ; then
	echo "Invalid docker file: $2" >&2
	help
    fi
    if ! [[ $3 =~ $DOCKER_REGEX ]] ; then
	echo "error: Not an image name $3" >&2
    help
    <% if node['install']['enterprise']['install'].casecmp?("true") && node['install']['cloud'].casecmp?("aws") && node['install']['managed_docker_registry'].casecmp?("true") -%>
    else 
        CLUSTER_ID="${BASH_REMATCH[5]}"
        REPO_NAME="${CLUSTER_ID}/${BASH_REMATCH[6]}"
        aws ecr create-repository --repository-name ${REPO_NAME} --tags Key=hopsworks-cluster,Value=${CLUSTER_ID}
    <% end -%>
    fi

    DOCKER_BUILDKIT=1 docker build -f $2 --tag $3 ./

    docker push $3

elif [ "$1" == "delete" ] ; then
    # Sanity checks for injection attacks
    if ! [[ $2 =~ $DOCKER_REGEX ]] ; then
	echo "error: Not an image name $3" >&2
    help
    <% if node['install']['enterprise']['install'].casecmp?("true") && node['install']['cloud'].casecmp?("aws") && node['install']['managed_docker_registry'].casecmp?("true") -%>
    else 
        REPO_NAME="${BASH_REMATCH[5]}/${BASH_REMATCH[6]}"
        aws ecr delete-repository --force --repository-name ${REPO_NAME}
    <% end -%>
    fi

    if [[ "$(docker images -q $2 2> /dev/null)" == "" ]]; then
	exit 0
    else
	docker rmi -f $2
    fi

elif [ "$1" == "list" ] ; then
    if ! [[ $2 =~ $DOCKER_REGEX ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker run --rm $2 conda list -n theenv

elif [ "$1" == "export" ] ; then
    if ! [[ $2 =~ $DOCKER_REGEX ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    docker run --rm $2 conda env export -n theenv

else
    help
fi

exit $?
